package com.example.bezpiecznynotatnik.fragments

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.example.bezpiecznynotatnik.Note
import com.example.bezpiecznynotatnik.NoteDao
import com.example.bezpiecznynotatnik.R
import com.example.bezpiecznynotatnik.SecureNotesApp
import com.example.bezpiecznynotatnik.activities.AccessActivity
import com.example.bezpiecznynotatnik.utils.ByteArrayUtil
import com.example.bezpiecznynotatnik.utils.EncryptionUtil
import kotlinx.coroutines.launch

class AddNoteFragment : Fragment() {

    private lateinit var messageInput: EditText
    private lateinit var saveButton: Button
    private lateinit var noteDao: NoteDao

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val view = inflater.inflate(R.layout.fragment_add_note, container, false)

        messageInput = view.findViewById(R.id.messageInput)
        saveButton = view.findViewById(R.id.saveButton)
        noteDao = (requireActivity().application as SecureNotesApp).noteDatabase.noteDao()

        saveButton.setOnClickListener {
            saveNote()
            val intent = Intent(requireContext(), AccessActivity::class.java)
            startActivity(intent)
        }
        return view
    }

    private fun saveNote() {
        val newMessage = messageInput.text.toString()
        if (newMessage.isNotEmpty()) {
            lifecycleScope.launch {
                try {
                    // Encrypt message
                    val (encryptedMessage, iv) = EncryptionUtil.encryptMessage(newMessage)
                    val note = Note(
                        id = 0, // Auto-generated by the database
                        encryptedMessage = ByteArrayUtil.toBase64(encryptedMessage),
                        iv = ByteArrayUtil.toBase64(iv)
                    )
                    noteDao.insert(note)

                    Toast.makeText(requireContext(), "Note added successfully.", Toast.LENGTH_SHORT).show()
                    messageInput.text.clear() // Clear the input field
                } catch (e: Exception) {
                    Log.e("AddNoteFragment", "Error adding note: ${e.message}")
                    Toast.makeText(requireContext(), "Error adding the note.", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            Toast.makeText(requireContext(), "Cannot add an empty note.", Toast.LENGTH_SHORT).show()
        }
    }
}
